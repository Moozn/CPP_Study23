#include <iostream>
#include <bitset>
using namespace std;

int main()
{
	//기본 연산자
	 
	//산술 연산자 + - * / %
	//int iA = 10, iB = 20;
	//int iSum = 10 + 20; //10 20은 리터럴 상수
	//cout << iSum << endl;
	//cout << 10 + 20 << endl;
	//cout << 20 - 10 << endl;
	//cout << 5 * 3 << endl;
	//cout << 10 / 2 << endl;
	//cout << 7 % 2 << endl; // % : 나누기 하고 남은 나머지를 출력
	//cout << (2 + 3) * 4 << endl; // 연산자 우선순위를 정할때 소괄호로 명시한다.

	// sizeof 연산자 (단항 연산자)
	// 자료형의 크기를 계산하는 연산자
	
	//cout << sizeof(10) << endl; //정수값 == int -> int형은 4바이트 자료형
	//cout << sizeof(10.0) << endl; //double 8바이트
	//cout << sizeof(10.f) << endl; // float 4바이트

	//short sNum = 10;
	//int iNum = 10;
	//long long llNum = 10;
	//float fNum = 10.f;
	//double dNum = 10.0;
	//char chNum= 'a';
	//bool bNum = true;
	//cout << sizeof(sNum) << endl;
	//cout << sizeof(iNum) << endl;
	//cout << sizeof(llNum) << endl;
	//cout << sizeof(fNum) << endl;
	//cout << sizeof(dNum) << endl;
	//cout << sizeof(chNum) << endl;
	//cout << sizeof(bNum) << endl;
	//
	//char ch1 = 'a';
	//char ch2 = 'b';
	//cout << sizeof(ch1 + ch2) << endl; // 계산결과가 정수형이기 때문에 4바이트 출력

	// 대입연산자 =
	// 오른쪽 항의 값을 왼쪽 항의 값으로 대입한다
	//int iA = 10, iB = 20, iC = 30;
	//iA = iB;
	//iB = iC;
	//iA = iB = iC = 100;
	//cout << iA << endl;

	// 관계연산자 < > <= >= == != (관계를 따진다고 해서 관계연산자)
	// 두 항사이의 관계를 계산해서 참이면 true(1), 거짓이면 false(0)를 반환
	//int iA = 10, iB = 20;
	//cout << (iA > iB) << endl;

	// 논리연산자 &&(and) ||(or) !(not)
	//cout << (true && true) << endl;
	//cout << (true && false) << endl;
	//cout << (false && true) << endl;
	//cout << (false && false) << endl;
	//&& : 두 항 모두 true일떄 true를 반환
	//cout << (true || true) << endl;
	//cout << (true || false) << endl;
	//cout << (false || true) << endl;
	//cout << (false || false) << endl;
	//||: 두 항중 하나라도 true면 true를 반환 
	//cout << !false << endl;
	//! : 항의 true, false를 반대로 바꾼다

	// 비트단위 논리연산자(정수형 데이터에서만 사용 가능) &(and) |(or) ~(not) ^(xor) 
	////&
	//int iA = 10 & 8;
	//cout << iA << endl;
	////|
	//int iB = 10 | 8;
	//cout << iB << endl;
	////~
	//short sA = ~8;
	//cout << sA << endl;
	////^
	//int iC = 8 ^ 10;
	//cout << iC << endl;

	// 비트단위 쉬프트 연산자 << >>
	//short sA = 10;
	//bitset<16> bitA = sA;
	//cout << bitA << endl;
	//
	//cout << "sA << 3" << endl;
	//sA = sA << 3;
	//bitA = sA;
	//cout << bitA << endl;
	//sA = sA >> 3;
	//bitA = sA;
	//cout << bitA << endl;
	// 사용시 비트 자리를 넘기지 않게 주의해야함. 음수가 되버림

	//형변환(자료형 변환)(캐스팅)
	//묵시적 형변환 : 대입 연산에서 왼편 기준으로 묵시적 형변환이 일어남
	//double dNum = 123; // 123.0
	//int iNum = 3.141592; // 3
	//크기가 큰 쪽에서 작은 쪽으로의 형변환은 오류가 일어남

	//명시적 형변환
	//double dNum = (double)123;
	//int iNum = (int)3.1415;

	//연산 과정에서 형변환
	//묵시적 형변환
	//int iA = 123;
	//long long llA = 1234;
	//cout << sizeof(iA + llA) << endl; //8 -> 같은 타입인 경우 크기가 큰쪽으로 변환
	//float fA = 10.123f;
	//cout << iA + fA << endl; // 정수와 실수형 사이의 연산에서는 우선적으로 실수로 형변환

	//명시적 형변환
	//int iA = 123;
	//float fA = 10.123f;
	//cout << iA + (int)fA << endl;

	// 대입 연산에서 형변환
	// 묵시적 형변환 : 대입 연산에서 왼편 기준으로 묵시적으로 형변환
	//double dA = 123; // 123.0
	//int iA = 3.14; // 3
	//
	//int iB = 97;
	//char chA = iB; // 큰쪽에서 작은쪽으로의 할당은 예측할 수 없는 결과를 초래한다.
	//cout << (int)chA << endl;//명시적 형변환
	//명시적 형변환
	//double dA = (double)123; // 123.0
	//int iA = (int)3.14; // 3

//과제 : 국어, 영어, 수학 성적을 입력받아 각 성적과 성적의 총합과 평균을 출력하시오
}
